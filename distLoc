import maya.api.OpenMaya as om
import maya.api.OpenMayaRender as omr
import maya.api.OpenMayaUI as omui
import pymel.core as pm
import maya.cmds as cmds


def maya_useNewAPI():
    """
    The presence of this function tells Maya that the plugin produces, and
    expects to be passed, objects created using the Maya Python API 2.0.
    """
    pass


class ColourDistIndicator(omui.MPxLocatorNode):

    TYPE_NAME = "dist"
    TYPE_ID = om.MTypeId(0x0007F7F7)
    DRAW_CLASSIFICATION = "drawdb/geometry/ColourDistIndicator"
    DRAW_REGISTRANT_ID = "ColourDistIndicator"

    point1_obj = None
    point2_obj = None

    factor_obj = None

    distance_obj = None
    rampColour_obj = None


    def __init__(self):
        super(ColourDistIndicator, self).__init__()

    def postConstructor(self):
        print("postConstructor")
        color_ramp_attribute = om.MRampAttribute(self.thisMObject(), self.rampColour_obj)
        positions = [0.0, 0.333, 0.666, 1.0]
        colors = [om.MColor([0, 0, 1]), om.MColor([0, 1, 0]), om.MColor([1, 1, 0]), om.MColor([1, 0, 0])]
        interps = [om.MRampAttribute.kLinear, om.MRampAttribute.kLinear, om.MRampAttribute.kLinear, om.MRampAttribute.kLinear]
        color_ramp_attribute.addEntries(positions, colors, interps)

    def compute(self, plug, data):
        point1 = om.MPoint(data.inputValue(self.point1_obj).asFloatVector())
        point2 = om.MPoint(data.inputValue(self.point2_obj).asFloatVector())

        factor = data.inputValue(ColourDistIndicator.factor_obj).asFloat()

        distance = point1.distanceTo(point2)
        data.outputValue(self.distance_obj).setDouble(distance)

        data.setClean(plug)

 
    @classmethod
    def creator(cls):
        return ColourDistIndicator()

    @classmethod
    def initialize(cls):
        numeric_attr = om.MFnNumericAttribute()

        cls.point1_obj = numeric_attr.createPoint("point1", "p1")
        numeric_attr.readable = False
        numeric_attr.keyable = True

        cls.point2_obj = numeric_attr.createPoint("point2", "p2")
        numeric_attr.readable = False
        numeric_attr.keyable = True

        cls.factor_obj = numeric_attr.create("factor", "fac", om.MFnNumericData.kFloat, 10.0)
        numeric_attr.readable = False
        numeric_attr.keyable = True
        
        cls.distance_obj = numeric_attr.create("distance", "dist", om.MFnNumericData.kDouble, 0.0)
        numeric_attr.writable = False

        cls.rampColour_obj = om.MRampAttribute.createColorRamp("colorRamp", "col", )
        
        cls.addAttribute(cls.point1_obj)
        cls.addAttribute(cls.point2_obj)
        cls.addAttribute(cls.factor_obj)
        cls.addAttribute(cls.rampColour_obj)
        cls.addAttribute(cls.distance_obj)

        cls.attributeAffects(cls.point1_obj, cls.distance_obj)
        cls.attributeAffects(cls.point2_obj, cls.distance_obj)
        cls.attributeAffects(cls.rampColour_obj, cls.distance_obj)

class DistLocatorDrawOverride(omr.MPxDrawOverride):

    NAME = "DistLocatorDrawOverride"

    def __init__(self, obj):
        super(DistLocatorDrawOverride, self).__init__(obj, None, False)

    def prepareForDraw(self, obj_path, camera_path, frame_context, old_data):
        node_fn = om.MFnDependencyNode(obj_path.node())
        self.distance = node_fn.findPlug("distance", False).asDouble()
        factor = node_fn.findPlug("factor", False).asFloat()

        ramp_position = self.distance / factor
        color_ramp_plug = node_fn.findPlug("colorRamp", False)
        color_ramp_attribute = om.MRampAttribute(color_ramp_plug)
        self.color = color_ramp_attribute.getValueAtPosition(ramp_position)

    def supportedDrawAPIs(self):
        return (omr.MRenderer.kAllDevices)

    def hasUIDrawables(self):
        return True

    def addUIDrawables(self, obj_path, draw_manager, frame_context, data):
        draw_manager.beginDrawable()
        draw_manager.setColor(self.color)
        draw_manager.text(om.MPoint(0, 0, 0), str(format(self.distance, '.3f')))

        draw_manager.endDrawable()

    @classmethod
    def creator(cls, obj):
        return DistLocatorDrawOverride(obj)


def initializePlugin(plugin):

    vendor = "Daniel Gonen"
    version = "1.0.0"
    api_version = "Any"

    plugin_fn = om.MFnPlugin(plugin, vendor, version, api_version)
    try:
        plugin_fn.registerNode(ColourDistIndicator.TYPE_NAME,              # name of the node
                               ColourDistIndicator.TYPE_ID,                # unique id that identifies node
                               ColourDistIndicator.creator,                # function/method that returns new instance of class
                               ColourDistIndicator.initialize,             # function/method that will initialize all attributes of node
                               om.MPxNode.kLocatorNode,                    # type of node to be registered
                               ColourDistIndicator.DRAW_CLASSIFICATION)    # draw-specific classification string (VP2.0)
    except:
        om.MGlobal.displayError("Failed to register node: {0}".format(ColourDistIndicator.TYPE_NAME))

    try:
        omr.MDrawRegistry.registerDrawOverrideCreator(ColourDistIndicator.DRAW_CLASSIFICATION,     # draw-specific classification
                                                      ColourDistIndicator.DRAW_REGISTRANT_ID,      # unique name to identify registration
                                                      DistLocatorDrawOverride.creator)         # function/method that returns new instance of class
    except:
        om.MGlobal.displayError("Failed to register draw override: {0}".format(DistLocatorDrawOverride.NAME))


def uninitializePlugin(plugin):

    plugin_fn = om.MFnPlugin(plugin)
    try:
        omr.MDrawRegistry.deregisterDrawOverrideCreator(ColourDistIndicator.DRAW_CLASSIFICATION, ColourDistIndicator.DRAW_REGISTRANT_ID)
    except:
        om.MGlobal.displayError("Failed to deregister draw override: {0}".format(DistLocatorDrawOverride.NAME))

    try:
        plugin_fn.deregisterNode(ColourDistIndicator.TYPE_ID)
    except:
        om.MGlobal.displayError("Failed to unregister node: {0}".format(ColourDistIndicator.TYPE_NAME))
